{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Platitudes","text":"<p>Platitudes builds CLI interfaces out of your functions based on the type hints provided on its signature. It aims to be a zero-dependency drop in replacement for Typer. If you are familiar with Typer then you will immediately feel at home with Platitudes.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Zero dependency</li> <li>Easy to use</li> <li>Minimal boilerplate</li> </ul>"},{"location":"#hello-world-example","title":"Hello world example","text":"<pre><code>import platitudes as pl\n\ndef hello_world(name: str = \"World\"):\n  print(f\"Hello {name}!\")\n\npl.run(hello_world)\n</code></pre> <p>Now you have a CLI! Let's check out the help:</p> <pre><code>\u276f python hello_world.py --help        \nusage: hello_world.py [-h] [--name NAME]\n\noptions:\n  -h, --help   show this help message and exit\n  --name NAME\n</code></pre> <p>We just have one optional parameter which means that we should be able to run it with extra arguments.</p> <pre><code>\u276f python hello_world.py               \nHello World!\n</code></pre> <p>or we can provide one ourselves,</p> <pre><code>\u276f python hello_world.py --name \u2b50\nHello \u2b50!\n</code></pre> <p>The key takeaway is that we can generate create CLI with zero boilerplate by calling <code>pl.run</code> and letting it figure it out from the type hints.</p> <p>For a more elaborate example check out the Quick Start Guide</p>"},{"location":"quick_start_guide/","title":"Quick Start Guide","text":"<pre><code>from enum import Enum\nfrom pathlib import Path\nfrom typing import Annotated\n\nimport platitudes as pl\n\napp = pl.Platitudes()\n\nclass Color(Enum):\n    RED = 0\n    GREEN = 1\n    BLUE = 2\n\n@app.command\ndef build_profile(\n    name: Annotated[str, pl.Argument(help=\"User name\")],  # Adding help strings\n    surname: str,\n    age: int,\n    photo_file: Annotated[\n        Path, pl.Argument(exists=True)  # Paths can be checked for existence\n    ],\n    favorite_color: Color = Color.RED,  # Optional enum argument with a default\n):\n    print(f\"The user is named {name} {surname} and his favorite color is {favorite_color}\")\n    print(f\"Age: {age}\")\n    print(f\"Picture stored at: {photo_file}\")\n\n    assert isinstance(photo_file, Path)\n    assert isinstance(favorite_color, Color)\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"}]}